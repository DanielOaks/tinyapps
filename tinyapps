#!/usr/bin/env python3
# TinyApps - Base Server
# written by Daniel Oaks <daniel@danieloaks.net>
# licensed under the BSD 2-clause license
import os
import sys
import traceback

# make everything relative to our base dir
# this is just so templates and importing work
abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

# webserver stuff
import jinja2
import twa
from twa import jinja_utils
import bottle

# jinja2 templates
env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'))
jinja_utils.apply_filters(env)

# webserver and submodules
app = bottle.Bottle()
config = twa.TinyConfig('data/config.json')
users = twa.TinyUsers('data/users.sqlite')


@bottle.route('/')
def index():
    """Install, login, or overview."""
    # todo: regex match it instead, make sure prople can't use bad stuff against us?
    is_local_request = (bottle.request.urlparts[1].lower().startswith('localhost') or
                        bottle.request.urlparts[1].lower().startswith('127.0.0.1'))
    if (not config.finished or not users.site_admin_exists) and is_local_request:
        # restrict to 127.0.0.1 / localhost
        return env.get_template('install.html').render(form=True, config=config, users=users)
    elif not config.finished or not users.site_admin_exists:
        return env.get_template('install.html').render(content="<h1>Instance must be setup from localhost.</h1>")
    else:
        return 'Login / Overview Pages to go here<br><a href="/example">Example Overview Page</a>'


# install
@bottle.route('/finish_install', method=['GET','POST'])
def index():
    """Finish installing!"""
    # todo: regex match it instead, make sure prople can't use bad stuff against us?
    is_local_request = (bottle.request.urlparts[1].lower().startswith('localhost') or
                        bottle.request.urlparts[1].lower().startswith('127.0.0.1'))
    if (not config.finished or not users.site_admin_exists) and is_local_request:
        # restrict to 127.0.0.1 / localhost
        for key in ['allow_external_ips']:
            value = bottle.request.forms.get(key)
            if value == 'TA_True':
                value = True
            setattr(config, key, value)
        config.save()

        # admin acct
        if not users.site_admin_exists:
            username = bottle.request.forms.get('username')
            password = bottle.request.forms.get('password')
            users.create_user(username, password, is_site_admin=True)

        return env.get_template('install.html').render(content="<h1>Finished installing!</h1>")
    elif (not config.finished or not users.site_admin_exists):
        return env.get_template('install.html').render(content="<h1>This can only be done locally, sorry!</h1>")
    else:
        return env.get_template('install.html').render(content="<h1>Already finished installing!</h1>")


@bottle.route('/example')
def index():
    """Example Page."""
    return env.get_template('example.html').render(title='Index', content='This is an example')


@bottle.route('/static/<filename:path>')
def static(filename):
    """Return static stuff."""
    return bottle.static_file(filename, root='static')

# run the webserver
if __name__ == '__main__':
    try:
        bottle.run(host='0.0.0.0', port=8080, debug=True)
    except:
        traceback.print_exc()

    # shutdown nicely
    config.save()
    users.save()
    users.shutdown()
